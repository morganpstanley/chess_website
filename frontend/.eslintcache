[{"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\index.js":"1","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\reducer.js":"3","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\App\\App.js":"4","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Header\\Header.js":"5","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\EvaluationBar\\EvaluationBar.js":"6","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\InfoBox\\InfoBox.js":"7","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Options\\Options.js":"8","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\CaptureArea\\CaptureArea.js":"9","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\PromotionPrompt\\PromotionPrompt.js":"10","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Dashboard\\Dashboard.js":"11","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Chessboard\\ChessBoard.js":"12","C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Chessboard\\Chessboard.js":"13"},{"size":670,"mtime":1612496325424,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1609801485948,"results":"16","hashOfConfig":"15"},{"size":1046,"mtime":1612663756758,"results":"17","hashOfConfig":"15"},{"size":257,"mtime":1611713174445,"results":"18","hashOfConfig":"15"},{"size":247,"mtime":1612395971182,"results":"19","hashOfConfig":"15"},{"size":2626,"mtime":1612633210323,"results":"20","hashOfConfig":"15"},{"size":4794,"mtime":1612666370963,"results":"21","hashOfConfig":"15"},{"size":1302,"mtime":1612666324126,"results":"22","hashOfConfig":"15"},{"size":4116,"mtime":1612521948876,"results":"23","hashOfConfig":"15"},{"size":1660,"mtime":1611711792072,"results":"24","hashOfConfig":"15"},{"size":906,"mtime":1612666300800,"results":"25","hashOfConfig":"15"},{"size":3646,"mtime":1611741044675,"results":"26","hashOfConfig":"15"},{"size":5156,"mtime":1612666556078,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"kqw8qg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\index.js",[],["57","58"],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\reducer.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\App\\App.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Header\\Header.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\EvaluationBar\\EvaluationBar.js",[],["59","60"],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\InfoBox\\InfoBox.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Options\\Options.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\CaptureArea\\CaptureArea.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\PromotionPrompt\\PromotionPrompt.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Dashboard\\Dashboard.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Chessboard\\ChessBoard.js",[],"C:\\Users\\morga\\Development\\chess_website\\frontend\\src\\Chessboard\\Chessboard.js",["61"],"import React, {useState, useEffect} from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport Chessground from 'react-chessground'\r\nimport EvaluationBar from '../EvaluationBar/EvaluationBar';\r\nimport CaptureArea from \"../CaptureArea/CaptureArea\"\r\nimport PromotionPrompt from \"../PromotionPrompt/PromotionPrompt\"\r\n\r\nimport 'react-chessground/dist/styles/chessground.css'\r\nimport \"./Chessboard.css\"\r\n\r\nconst stockfishPlayer = new Worker('stockfish.js')\r\nconst stockfishWhite = new Worker('stockfish.js')\r\nconst stockfishBlack = new Worker('stockfish.js')\r\n\r\nconst Chessboard = ({playerColor, computerOpponent}) => {\r\n\r\n  const chess = useSelector(state => state.game)\r\n  const fen = useSelector(state => state.fen)\r\n  const depth = useSelector(state => state.depth)\r\n  const [currentDepth, setCurrentDepth] = useState(0)\r\n  const [pendingMove, setPendingMove] = useState()\r\n  const [lastMove, setLastMove] = useState()\r\n  const [evaluation, setEvaluation] = useState({evaluation: 0.2, color: \"w\", mate: 0})\r\n  const [showModal, setShowModal] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  const stockfishMove = () => {\r\n    setShowModal(false)\r\n    // setStockfish()\r\n    stockfishPlayer.postMessage(`position fen ${fen}`)\r\n    stockfishPlayer.postMessage('go depth 15')\r\n  }\r\n\r\n  const onMove = (from, to) => {\r\n    const moves = chess.moves({ verbose: true })\r\n\r\n    //check if move is pawn promotion\r\n    for (let i = 0, len = moves.length; i < len; i++) { /* eslint-disable-line */\r\n      if (moves[i].flags.indexOf(\"p\") !== -1 && moves[i].from === from) {\r\n        setPendingMove([from, to])\r\n        setShowModal(true)\r\n        return\r\n      }\r\n    }\r\n\r\n    move(from, to)\r\n\r\n    //right now onMove is only being used after player moves, not computer, so can computer promote?\r\n    if (computerOpponent) {stockfishMove()};\r\n\r\n  }\r\n\r\n  // const setStockfish = () => {\r\n  //   stockfishPlayer.postMessage('setoption name Skill Level value 0')\r\n  //   stockfishPlayer.postMessage('setoption name Skill Level Maximum Error value 900')\r\n  //   stockfishPlayer.postMessage('setoption name Skill Level Probability value 10')\r\n  // }\r\n\r\n  const stockfishAnalyze = () => {\r\n    if (chess.turn() === \"w\") {\r\n      stockfishBlack.postMessage('stop')\r\n      stockfishWhite.postMessage(`position fen ${fen}`)\r\n      stockfishWhite.postMessage(`go depth 23`)\r\n    } else {\r\n      stockfishWhite.postMessage('stop')\r\n      stockfishBlack.postMessage(`position fen ${fen}`)\r\n      stockfishBlack.postMessage(`go depth 23`)\r\n    }\r\n  }\r\n\r\n  stockfishPlayer.onmessage = (event) => { \r\n    let bestMove = event.data.match(/^bestmove ([a-h][1-8])([a-h][1-8])([qrbn])?/);\r\n\r\n    if (bestMove) {\r\n      move(bestMove[1], bestMove[2]);\r\n    }\r\n  }\r\n\r\n  useEffect((stockfishAnalyze), [fen, chess])\r\n\r\n  const move = (from, to) => {\r\n    chess.move({from, to});\r\n    setLastMove([from, to]);\r\n    dispatch({type: \"UPDATE_GAME\", game: chess, fen: chess.fen(), pgn: chess.pgn()})\r\n    stockfishAnalyze();\r\n  }\r\n\r\n  stockfishWhite.onmessage = (event) => {\r\n   handleMessage(event, \"w\")\r\n  }\r\n\r\n  stockfishBlack.onmessage = (event) => {\r\n   handleMessage(event, \"b\")\r\n  }\r\n\r\n  const handleMessage = (event, color) => {\r\n    let evaluation = event.data.match(/(?<=cp )(-?\\d*)/);\r\n    let mate = event.data.match(/(?<=mate )(-?\\d*)/);\r\n    let matchDepth = event.data.match(/(?<=depth )(-?\\d*)/);\r\n    if (matchDepth !== null && matchDepth[0] !== currentDepth ) {\r\n      setCurrentDepth(matchDepth[0])\r\n    }\r\n    if (evaluation != null && chess.turn() === color) {\r\n      setEvaluation(\r\n        {evaluation: evaluation[1] / 100, \r\n          color: color,\r\n          mate: 0\r\n        })\r\n    }\r\n    if (mate) {\r\n      setEvaluation({...evaluation, mate: mate[0]})\r\n    }\r\n  }\r\n\r\n  const promotion = e => {\r\n    const from = pendingMove[0]\r\n    const to = pendingMove[1]\r\n    chess.move({ from, to, promotion: e })\r\n    setLastMove([from, to])\r\n    setShowModal(false)\r\n  }\r\n\r\n  const turnColor = () => {\r\n    return chess.turn() === \"w\" ? \"white\" : \"black\"\r\n  }\r\n\r\n  const calcMovable = () => {\r\n    const dests = new Map()\r\n    chess.SQUARES.forEach(s => {\r\n      const ms = chess.moves({ square: s, verbose: true })\r\n      if (ms.length) dests.set(s, ms.map(m => m.to))\r\n    })\r\n    return {\r\n      free: false,\r\n      dests,\r\n      color: turnColor()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (playerColor !== turnColor() && computerOpponent) {\r\n      stockfishMove()\r\n    }\r\n  })\r\n\r\n  return (\r\n      <div id=\"chessboard\">\r\n        <EvaluationBar playerColor={playerColor} evaluationObj={evaluation}/>\r\n\r\n        <Chessground\r\n          orientation={playerColor}\r\n          turnColor={turnColor()}\r\n          movable={calcMovable()}\r\n          lastMove={lastMove}\r\n          fen={chess.fen()}\r\n          onMove={onMove}\r\n        />\r\n\r\n        <div id=\"depth\">\r\n          <span id=\"depth-title\">DEPTH</span> \r\n          <br />\r\n          <span id=\"depth-num\">{currentDepth}</span>\r\n        </div>\r\n\r\n        <CaptureArea/>\r\n\r\n        <PromotionPrompt promotion={promotion} showModal={showModal}/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Chessboard",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":19,"column":9,"nodeType":"70","messageId":"71","endLine":19,"endColumn":14},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],"no-unused-vars","'depth' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]